// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subjects.queries.sql

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (user_id, name)
VALUES ($1, $2)
RETURNING id, user_id, name, created_at, updated_at
`

type CreateSubjectParams struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, createSubject, arg.UserID, arg.Name)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM subjects
WHERE id = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubject, id)
	return err
}

const getSubjectByID = `-- name: GetSubjectByID :one
SELECT id, user_id, name, created_at, updated_at FROM subjects
WHERE id = $1
`

func (q *Queries) GetSubjectByID(ctx context.Context, id uuid.UUID) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectByID, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubjectByUserAndName = `-- name: GetSubjectByUserAndName :one
SELECT id, user_id, name, created_at, updated_at FROM subjects
WHERE user_id = $1 AND name = $2
`

type GetSubjectByUserAndNameParams struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) GetSubjectByUserAndName(ctx context.Context, arg GetSubjectByUserAndNameParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectByUserAndName, arg.UserID, arg.Name)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubjectWithCounts = `-- name: GetSubjectWithCounts :one
SELECT
    s.id, s.user_id, s.name, s.created_at, s.updated_at,
    COUNT(DISTINCT e.id) as exams_count,
    COUNT(DISTINCT sp.id) as study_plans_count
FROM subjects s
LEFT JOIN exams e ON s.id = e.subject_id
LEFT JOIN study_plans sp ON e.id = sp.exam_id
WHERE s.id = $1
GROUP BY s.id, s.user_id, s.name, s.created_at, s.updated_at
`

type GetSubjectWithCountsRow struct {
	ID              uuid.UUID    `json:"id"`
	UserID          string       `json:"user_id"`
	Name            string       `json:"name"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
	ExamsCount      int64        `json:"exams_count"`
	StudyPlansCount int64        `json:"study_plans_count"`
}

func (q *Queries) GetSubjectWithCounts(ctx context.Context, id uuid.UUID) (GetSubjectWithCountsRow, error) {
	row := q.db.QueryRowContext(ctx, getSubjectWithCounts, id)
	var i GetSubjectWithCountsRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExamsCount,
		&i.StudyPlansCount,
	)
	return i, err
}

const getSubjectsByUserId = `-- name: GetSubjectsByUserId :many
SELECT id, user_id, name, created_at, updated_at FROM subjects
WHERE user_id = $1
ORDER BY name ASC
`

func (q *Queries) GetSubjectsByUserId(ctx context.Context, userID string) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, getSubjectsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubjectsWithCounts = `-- name: GetSubjectsWithCounts :many
SELECT
    s.id, s.user_id, s.name, s.created_at, s.updated_at,
    COUNT(DISTINCT e.id) as exams_count,
    COUNT(DISTINCT sp.id) as study_plans_count
FROM subjects s
LEFT JOIN exams e ON s.id = e.subject_id
LEFT JOIN study_plans sp ON e.id = sp.exam_id
WHERE s.user_id = $1
GROUP BY s.id, s.user_id, s.name, s.created_at, s.updated_at
ORDER BY s.name ASC
`

type GetSubjectsWithCountsRow struct {
	ID              uuid.UUID    `json:"id"`
	UserID          string       `json:"user_id"`
	Name            string       `json:"name"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
	ExamsCount      int64        `json:"exams_count"`
	StudyPlansCount int64        `json:"study_plans_count"`
}

func (q *Queries) GetSubjectsWithCounts(ctx context.Context, userID string) ([]GetSubjectsWithCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubjectsWithCounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubjectsWithCountsRow
	for rows.Next() {
		var i GetSubjectsWithCountsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExamsCount,
			&i.StudyPlansCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubject = `-- name: UpdateSubject :one
UPDATE subjects
SET name = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, user_id, name, created_at, updated_at
`

type UpdateSubjectParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, updateSubject, arg.ID, arg.Name)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
